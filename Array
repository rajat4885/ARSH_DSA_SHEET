Q1- Remove Duplicates from Sorted Array

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).


SOLUTION--> 

class Solution {
public:
    int removeDuplicates(vector<int>& arr) {
        int j=0;
        for(int i=0;i<arr.size();i++){
if(arr[i]!=arr[j]){
arr[j+1]=arr[i];
    j++;
}
        }
        return j+1;
    }
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Q: Two Sum

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

SOLUTION--->

class Solution {
public:
    vector<int> twoSum(vector<int>&arr, int target) {
     map<int,int>mp;

     for(int i=0;i<arr.size();i++){
        int rem= target-arr[i];

        if(mp.find(rem)!=mp.end()){

            return{mp[rem],i};
        }
        mp[arr[i]]=i;
     }   

     return{-1,-1};
    }
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q: Move Zeroes

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

SOLUTION: 

class Solution {
public:
    void moveZeroes(vector<int>& nums) {


        if(nums.size()==1 || nums.size()==0){
            return;
        }
        int left=0; int right=0;

        while(right<nums.size() && left<nums.size()){

 if(nums[right]!=0){
    swap(nums[left],nums[right]);
    left++;
    right++;
 }
 else {
    right++; }
 }     }
  };
